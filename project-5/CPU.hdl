// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in = instruction[15], out = aInstruction);
    Not(in = aInstruction, out = cInstruction);

    //If C instruction and destination[0] is on, take A register from ALU
    And(a=cInstruction, b=instruction[5], out=selectALUOut);
    Mux16(a = instruction, b = aluOut, sel = selectALUOut, out = aluOutOrInstruction);
    // A register: load if first bit of destination bits (instruction[5]) is on

    Or(a = aInstruction, b =  instruction[5], out = loadA);
    ARegister(in = aluOutOrInstruction, load = loadA, out = aRegisterOut, out[0..14] = addressM);
    // If fourth bit (a or c) is 0, take from a register otherwise take from memory
    Mux16(a = aRegisterOut, b = inM, sel = instruction[12], out = aOrMRegister);


    //D register: load if c instruction and 2nd bit of destination bits (instruction[4]) is on
    And(a = cInstruction, b = instruction[4], out = shouldLoadD);
    DRegister(in = aluOut, load = shouldLoadD, out = dRegisterOut);

    ALU(x = dRegisterOut, y = aOrMRegister,  zx = instruction[11], nx= instruction[10], zy= instruction[9], ny= instruction[8], f= instruction[7], no = instruction[6], out = aluOut, out = outM, zr = zr, ng = ng);

    Mux(a = false, b = instruction[3], sel = cInstruction, out = writeM);

    // Program counter
    // Jump bits are cxxaccccdddjjj so instruction[2] = jump bit 1, instruction[1] = jump bit 2, instruction[0] = jump bit 3

    // Setting up some useful stuff
    Or(a = ng, b = zr, out = negOrZero);
    Not(in = negOrZero, out = positive);
    Not(in = zr, out = notZero);
    And(a = ng, b = notZero, out = negative);

    And(a = negative, b = instruction[2], out = lessThanResult);
    And(a = zr, b = instruction[1], out = zeroResult);
    And(a = positive, b = instruction[0], out = greaterThanResult);
    Or(a = lessThanResult, b = zeroResult, out = lessThanOrEqual);
    Or(a = lessThanOrEqual, b = greaterThanResult, out = jumpResult);
    And(a = cInstruction, b = jumpResult, out = shouldJump);
    Not(in = shouldJump, out = shouldInc);
    PC(in = aRegisterOut, load = shouldJump, inc = shouldInc, reset =reset, out[0..14] = pc);

}