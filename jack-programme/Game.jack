class Game {
    field int score;
    field Renderer renderer;
    field Grid grid;

    constructor Game new() {
      let renderer = Renderer.new();
      let score = 0;
      let grid = Grid.new();
      do grid.setBlockValue(0, 3, 2);
      do grid.setBlockValue(2, 2, 2048);
      return this;
    }

    method void dispose() {
        do memory.deAlloc(this);
        return;
    }

     method void run() {
          var char key;
          var boolean quit;
          var int direction;

          let quit = false;
          do renderer.drawState(grid.getRows());

          while (~quit) {
             while (key = 0) {
                let key = Keyboard.keyPressed();
             }
             if (key = 81)  { let quit = true; }     // q => quit
             if (key = 131) { let direction = 1; }   // up arrow
             if (key = 133) { let direction = 2; }   // down arrow
             if (key = 130) { let direction = 3; }   // left arrow
             if (key = 132) { let direction = 4; }   // right arrow

             while (~(key = 0)) {
                let key = Keyboard.keyPressed();
                do moveBlocks(direction);
                do renderer.drawState(grid.getRows());
             }
         }
         return;
       }

    //* moves block if the block next to it in direction is empty. Keeps going for the block until it can move no more */
    method void moveBlock(int x, int y, int direction, int blockValue) {
        var int nextY;
        var int nextX;
        var boolean continue;

        if (( direction = 1 ) | ( direction = 2 )) { // move up or down
            let nextX = x;
            if ( direction = 1 ) { // moving up (decreasing y)
                let nextY = y - 1;
                let continue = y > 0;
            } else { // moving down (increasing y)
                let nextY = y + 1;
                let continue = y < 3;
            }
        } else { // move left or right
            let nextY = y;
            if ( direction = 3 ) { // moving left (decreasing x)
                let nextX = x - 1;
                let continue = x > 0;
            } else { //moving right (increasing x)
                let nextX = x + 1;
                let continue = x < 3;
            }
         }

        if ( continue ) {
            if (grid.getBlockValue(nextX, nextY) = 0) {
               do grid.setBlockValue(x, y, 0);
               do grid.setBlockValue(nextX, nextY, blockValue);
               do moveBlock(nextX, nextY, direction, blockValue); //keep going, might be more to move
            }
        }
        return;
    }

    //* loops through rows and columns, starting from top-most row if going up,
    //* left-most column if going left etc, and move block the block there if there is space.
    //* If moving vertically, the inner counter represents the x value (and the outer the y),
    //* as we want to iterate through each block in the row before moving onto the next row.
    //* If moving horizontally, the inner counter represents the y value (and the outer the x),
    //* as we want to instead iterate through each block in the column before moving on */
    method void moveBlocks(int direction) {
        var int counterOne;
        var int counterTwo;
        var int y;
        var int x;

        while (counterOne < 4) {
            let counterTwo = 0;
            while (counterTwo < 4) {
                if ( ( direction = 1) | ( direction = 3 ) ) {
                    let x = counterTwo;
                    if ( direction = 1 ) { let y = counterOne; } else { let y = 3 - counterOne; } // go through rows top to bottom or bottom to top
                } else {
                    let y = counterTwo;
                    if ( direction = 3 ) { let x = counterOne; } else { let x = 3 - counterOne; } // go through columns left to right or right to left
                }
                do moveBlockIfSpace(x, y, direction);
                let counterTwo = counterTwo + 1;
            }
            let counterOne = counterOne + 1;
        }
        return;
    }

    method void moveBlockIfSpace(int x, int y, int direction) {
        var int blockValue;
        let blockValue = grid.getBlockValue(x, y);
        if (~( blockValue = 0 )) { do moveBlock(x, y, direction, blockValue); }
        return;
    }
}