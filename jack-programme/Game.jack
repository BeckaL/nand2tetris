class Game {
    field int score;
    field Array rows;
    field Renderer renderer;

    constructor Game new() {
      var Array rowToInsert;

      let renderer = Renderer.new();
      let score = 0;
      let rows = createInitialRows();
      let rowToInsert = rows[3];
      do setBlockValue(0, 3, 2);
      do setBlockValue(2, 2, 2048);
      return this;
    }

    method void dispose() {
        do memory.deAlloc(this);
        return;
    }

     method void run() {
          var char key;
          var boolean quit;
          var int direction;

          let quit = false;
          do renderer.drawState(rows);

          while (~quit) {
             while (key = 0) {
                let key = Keyboard.keyPressed();
             }
             if (key = 81)  { let quit = true; }     // q => quit
             if (key = 131) { let direction = 1; }   // up arrow
             if (key = 133) { let direction = 2; }   // down arrow
             if (key = 130) { let direction = 3; }   // left arrow
             if (key = 132) { let direction = 4; }   // right arrow

             while (~(key = 0)) {
                let key = Keyboard.keyPressed();
                do moveBlocks(direction);
                do renderer.drawState(rows);
             }
         }
         return;
       }

    method void moveBlock(int x, int y, int direction, int blockValue) {
        var int next;
        var boolean continue;
        if (direction = 1) {
            if ( y > 0 ) {
                if (getBlockValue(x, y - 1) = 0) {
                   do setBlockValue(x, y, 0);
                   do setBlockValue(x, y - 1, blockValue);
                   do moveBlock(x, y - 1, direction, blockValue); //keep going, might be more to move
                }
           }
        } else {
            if (direction = 2) { // move blocks down
                if ( y < 3 ) {
                    if (getBlockValue(x, y + 1) = 0) {
                       do setBlockValue(x, y, 0);
                       do setBlockValue(x, y + 1, blockValue);
                       do moveBlock(x, y + 1, direction, blockValue); //keep going, might be more to move
                    }
                }
            }
        }
        return;
    }

    method int getBlockValue(int x, int y) {
        var Array row;
        let row = rows[y];
        return row[x];
    }

    method void setBlockValue(int x, int y, int value) {
         var Array row;
         let row = rows[y];
         let row[x] = value;
         return;
    }

    method void moveBlocks(int direction) {
        var int xCounter;
        var int yCounter;
        var int y;
        var int blockValue;

        let yCounter = 0;
        let xCounter = 0;

        if ( direction = 1 ) {
            while (yCounter < 4) {
                let xCounter = 0;
                while (xCounter < 4) {
                    let blockValue = getBlockValue(xCounter, yCounter);
                    if (~(blockValue = 0)) { do moveBlock(xCounter, yCounter, direction, blockValue); }
                    let xCounter = xCounter + 1;
                }
                let yCounter = yCounter + 1;
            }
        } else {
            if ( direction = 2 ) { //moving down i.e. increasing y
                while (yCounter < 4) {
                    let xCounter = 0;
                    while (xCounter < 4) {
                        let blockValue = getBlockValue(xCounter, 3 - yCounter);
                        if (~(blockValue = 0)) { do moveBlock(xCounter, 3 - yCounter, direction, blockValue); }
                        let xCounter = xCounter + 1;
                    }
                    let yCounter = yCounter + 1;
                }
            }
        }
        return;
    }

    method Array createInitialRows() {
        var Array rows;
        var int counter;
        let rows = Array.new(4);
        while (counter < 4) {
           let rows[counter] = Array.new(4);
           let counter = counter + 1;
        }
        return rows;
    }
}