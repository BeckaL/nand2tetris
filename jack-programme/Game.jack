class Game {
    field int score;
    field Renderer renderer;
    field Grid grid;

    constructor Game new() {
      let renderer = Renderer.new();
      let score = 0;
      let grid = Grid.new();
      do grid.setBlockValue(Coordinate.new(0, 3), 2);
      do grid.setBlockValue(Coordinate.new(2, 2), 2048);
      do grid.setBlockValue(Coordinate.new(1, 1), 2);
      return this;
    }

    method void dispose() {
        do memory.deAlloc(this);
        return;
    }

     method void run() {
         var char key;
         var boolean quit;
         var int direction;

         let quit = false;
         do renderer.drawState(grid.getRows());

         while (~quit) {
            while (key = 0) {
               let key = Keyboard.keyPressed();
            }
            if (key = 81)  { let quit = true; }     // q => quit
            if (key = 131) { let direction = 1; }   // up arrow
            if (key = 133) { let direction = 2; }   // down arrow
            if (key = 130) { let direction = 3; }   // left arrow
            if (key = 132) { let direction = 4; }   // right arrow

            while (~(key = 0)) {
               let key = Keyboard.keyPressed();
               do moveBlocks(direction);
               do renderer.drawState(grid.getRows());
               do smashBlocks(direction);
               do renderer.drawState(grid.getRows());
            }
         }
         return;
       }

    //* moves block if the block next to it in direction is empty. Keeps going for the block until it can move no more */
    method void moveBlock(Coordinate currentCoord, int direction, int blockValue) {
        var Coordinate nextCoordinate;
        var boolean continue;

        if (( direction = 1 ) | ( direction = 2 )) { // move up or down
            if ( direction = 1 ) { // moving up (decreasing y)
                let nextCoordinate = currentCoord.decreaseY();
                let continue = currentCoord.getY() > 0;
            } else { // moving down (increasing y)
                let nextCoordinate = currentCoord.increaseY();
                let continue = currentCoord.getY() < 3;
            }
        } else { // move left or right
            if ( direction = 3 ) { // moving left (decreasing x)
                let nextCoordinate = currentCoord.decreaseX();
                let continue = currentCoord.getX() > 0;
            } else { //moving right (increasing x)
                let nextCoordinate = currentCoord.increaseX();
                let continue = currentCoord.getX() < 3;
            }
         }

        if ( continue ) {
            if (grid.getBlockValue(nextCoordinate) = 0) {
               do grid.setBlockValue(currentCoord, 0);
               do grid.setBlockValue(nextCoordinate, blockValue);
               do moveBlock(nextCoordinate, direction, blockValue); //keep going, might be more to move
            }
        }
        return;
    }

    //* after first move, smash blocks together if they are the same value
    method void smashBlocks(int direction) {
        var int counterOne;
        var int counterTwo;
        var Coordinate currentCoord;
        var Coordinate neighbouringCoord;
        var int block;
        var int neighbour;

        let counterOne = 1;

        while ( counterOne < 4 ) {
            let counterTwo = 0;
            while ( counterTwo < 3 ) {
                if ( ( direction = 1 ) | ( direction = 2 )) {
                    if ( direction = 1) {
                        let coord = Coordinate.new(counterTwo, counterOne);
                        let neighbouringCoord = coord.decreaseY();
                    } else {
                        let coord = Coordinate.new(counterTwo, 4 - counterOne);
                        let neighbouringCoord = coord.increaseY();
                    }
                    let block = grid.getBlockValue(coord);
                    let neighbour = grid.getBlockValue(neighbouringCoord);
                }
                if ( ~( block = 0) ) {
                    if (block = neighbour) {
                        do grid.setBlockValue(Coordinate.new(x, y), 0);
                        do grid.setBlockValue(Coordinate.new(neighbourX, neighbourY), block * 2);
                    }
                }
                let counterTwo = counterTwo + 1;
            }
            let counterOne = counterOne + 1;
        }
        return;
    }

    //* loops through rows and columns, starting from top-most row if going up,
    //* left-most column if going left etc, and move block the block there if there is space.
    //* If moving vertically, the inner counter represents the x value (and the outer the y),
    //* as we want to iterate through each block in the row before moving onto the next row.
    //* If moving horizontally, the inner counter represents the y value (and the outer the x),
    //* as we want to instead iterate through each block in the column before moving on */
    method void moveBlocks(int direction) {
        var int counterOne;
        var int counterTwo;
        var Coordinate coord;

        while (counterOne < 4) {
            let counterTwo = 0;
            while (counterTwo < 4) {
                if ( ( direction = 1) | ( direction = 3 ) ) {
                    if ( direction = 1 ) {
                        let coord = Coordinate.new(counterTwo, counterOne);
                   } else {
                        let coord = Coordinate.new(counterTwo, 3 - counterOne);
                    } // go through rows top to bottom or bottom to top
                } else {
                    if ( direction = 3 ) {
                        let coord = Coordinate.new(counterOne, counterTwo);
                    } else {
                        let coord = Coordinate.new(3 - counterOne, counterTwo);
                    } // go through columns left to right or right to left
                }
                do moveBlockIfSpace(coord, direction);
                let counterTwo = counterTwo + 1;
            }
            let counterOne = counterOne + 1;
        }
        return;
    }

    method void moveBlockIfSpace(Coordinate c, int direction) {
        var int blockValue;
        let blockValue = grid.getBlockValue(c);
        if (~( blockValue = 0 )) { do moveBlock(c, direction, blockValue); }
        return;
    }
}